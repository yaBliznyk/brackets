// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BracketsClient is the client API for Brackets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BracketsClient interface {
	// Validate string
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	// Fix string
	Fix(ctx context.Context, in *FixRequest, opts ...grpc.CallOption) (*FixResponse, error)
}

type bracketsClient struct {
	cc grpc.ClientConnInterface
}

func NewBracketsClient(cc grpc.ClientConnInterface) BracketsClient {
	return &bracketsClient{cc}
}

func (c *bracketsClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/brackets.proto.Brackets/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bracketsClient) Fix(ctx context.Context, in *FixRequest, opts ...grpc.CallOption) (*FixResponse, error) {
	out := new(FixResponse)
	err := c.cc.Invoke(ctx, "/brackets.proto.Brackets/Fix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BracketsServer is the server API for Brackets service.
// All implementations must embed UnimplementedBracketsServer
// for forward compatibility
type BracketsServer interface {
	// Validate string
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	// Fix string
	Fix(context.Context, *FixRequest) (*FixResponse, error)
	mustEmbedUnimplementedBracketsServer()
}

// UnimplementedBracketsServer must be embedded to have forward compatible implementations.
type UnimplementedBracketsServer struct {
}

func (UnimplementedBracketsServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedBracketsServer) Fix(context.Context, *FixRequest) (*FixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fix not implemented")
}
func (UnimplementedBracketsServer) mustEmbedUnimplementedBracketsServer() {}

// UnsafeBracketsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BracketsServer will
// result in compilation errors.
type UnsafeBracketsServer interface {
	mustEmbedUnimplementedBracketsServer()
}

func RegisterBracketsServer(s *grpc.Server, srv BracketsServer) {
	s.RegisterService(&_Brackets_serviceDesc, srv)
}

func _Brackets_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BracketsServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brackets.proto.Brackets/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BracketsServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brackets_Fix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BracketsServer).Fix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brackets.proto.Brackets/Fix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BracketsServer).Fix(ctx, req.(*FixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Brackets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "brackets.proto.Brackets",
	HandlerType: (*BracketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Brackets_Validate_Handler,
		},
		{
			MethodName: "Fix",
			Handler:    _Brackets_Fix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/brackets.proto",
}
